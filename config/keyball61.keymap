 #include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#include "zmk-helpers/helper.h"
#include "key-labels/keyball61.h"

#define HOME_MOD_L LM1 LM2 LM3 LM4 // left hand
#define HOME_MOD_R RM1 RM2 RM3 RM4 // right hand
#define KEYS_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define NOT_HOME_L LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define NOT_HOME_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 LM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS_L LH0 LH1 LH2 LH3 LH4 LH5 LH6
#define THUMBS_R RH0 RH1 RH2 RH3

#define COLEMAK 0
#define NUM     1
#define SYM     2
#define QWERTY  3
#define MOUSE   4
#define SNIPE   5

#define HOLD_TAPPING_TERM_MS 180
#define QUICK_TAP_MS 175
#define REQ_PRIOR_IDLE_MS 150
#define TAPPING_TERM_MS 200

&lt {
  tapping-term-ms = <TAPPING_TERM_MS>;
  flavor = "balanced";
  quick-tap-ms = <REQ_PRIOR_IDLE_MS>;
};

&mmv {
  acceleration-exponent = <1>;      // 1
  time-to-max-speed-ms = <500>;     // 500
  delay-ms = <0>;                   // 0
};

&msc {
  acceleration-exponent = <1>;      // 0
  time-to-max-speed-ms = <40>;      // 300
  delay-ms = <0>;                   // 0
};

&mt {
  flavor = "tap-preferred";
  hold-trigger-key-positions = <0>;
  quick-tap-ms = <220>;
  tapping-term-ms = <220>;
};

&sl {
  release-after-ms = <300000>; // 5 * 60 * 1000
};

/* HRM combos */
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <HOLD_TAPPING_TERM_MS>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <REQ_PRIOR_IDLE_MS>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS_R THUMBS_L)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS_L THUMBS_R)  // right-hand HRMs

// HRM combo hack - workaround for lack of tap-only combos (ZMK issue #544)
#define ZMK_COMBO_8(NAME, TAP, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE, HOLD, SIDE) \
    MAKE_HRM(hm_combo_ ## NAME, &kp, TAP, SIDE THUMBS) \
    ZMK_COMBO_6(NAME, &hm_combo_ ## NAME HOLD 0, KEYPOS, LAYERS, COMBO_TERM, COMBO_IDLE)

#include "keyball61.combos.dtsi"
#include "keyball61.tapdance.dtsi"

/* Mod morphs */
ZMK_MOD_MORPH(bs_del,
  bindings = <&kp BACKSPACE>, <&kp DELETE>;
  keep-mods = <MOD_RSFT>;
  mods = <(MOD_LSFT|MOD_RSFT)>;
)
ZMK_MOD_MORPH(gr_esc,
  bindings = <&kp ESC>, <&kp GRAVE>;
  mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
)
ZMK_MOD_MORPH(tilde_esc,
  bindings = <&gr_esc>, <&kp TILDE>;
  mods = <(MOD_LALT|MOD_LCTL|MOD_RALT|MOD_RCTL)>;
)

/* Keymap */
/ {
  keymap {
    compatible = "zmk,keymap";
/********************************************************************************/
/* COLEMAK */
/********************************************************************************/
colemak { bindings = <
&tilde_esc      &kp N1            &kp N2           &kp N3           &kp N4               &kp N5                                       &kp N6      &kp N7               &kp N8               &kp N9             &kp N0               &kp MINUS
&kp TAB         &hml LC(LALT) Q   &hml LC(LGUI) W  &hml LA(LGUI) F  &hml LC(LA(LGUI)) P  &lt 1 G                                      &lt 1 J     &hmr RC(RA(RGUI)) L  &hmr RA(RGUI) U      &hmr RC(RGUI) Y    &hmr RC(RALT) SEMI   &kp BSLH
&bs_del         &hml LCTRL A      &hml LALT R      &hml LGUI S      &hml LSHIFT T        &lt 2 D                                      &lt 2 H     &hmr RSHIFT N        &hmr RGUI E          &hmr RALT I        &hmr RCTRL O         &kp SQT
&left_shift     &hml LS(LCTRL) Z  &hml LS(LALT) X  &hml LS(LGUI) C  &hml LS(LC(LALT)) V  &lt 4 B           &left_bkt  &right_bkt      &lt 4 K     &hmr RS(RC(RALT)) M  &hmr RS(RGUI) COMMA  &hmr RS(RALT) DOT  &hmr RS(RCTRL) FSLH  &right_shift
&lt 1 C_VOL_DN  &lt 2 C_VOL_UP    &kp LEFT         &kp RIGHT        &kp SPACE            &hml LSHFT RET    &to 1      &hmr RSHFT RET  &kp SPACE                                                                &lt 2 UP             &lt 1 DOWN
>; }; // colemak
/********************************************************************************/
/* NUM */
/********************************************************************************/
num { bindings = <
&trans          &kp F1            &kp F2           &kp F3            &kp F4              &kp F5                                       &kp F6      &kp F7               &kp F8               &kp F9             &kp F10              &kp F11
&trans          &kp GRAVE         &kp AMPS         &kp STAR          &kp LPAR            &kp MINUS                                    &kp PLUS    &kp N7               &kp N8               &kp N9             &kp FSLH             &kp F12
&trans          &kp TILDE         &kp DLLR         &kp PRCNT         &kp CARET           &kp UNDER                                    &kp EQUAL   &kp N4               &kp N5               &kp N6             &kp STAR             &kp F13
&trans          &trans            &kp EXCL         &kp AT            &kp HASH            &kp RPAR          &kp LBRC   &kp RBRC        &kp N0      &kp N1               &kp N2               &kp N3             &trans               &trans
&trans          &trans            &trans           &trans            &kp LS(LG(LBKT))    &kp LS(LG(RBKT))  &to 2      &trans          &trans                                                                   &trans               &trans
>; }; // num 
/********************************************************************************/
/* SYM */
/********************************************************************************/
sym { bindings = <
&trans          &trans            &trans           &trans            &trans              &kp LG(F6)                                   &kp RS(F6)  &kp RA(F7)           &kp RG(F7)           &trans             &trans               &trans
&trans          &trans            &kp HOME         &kp UP            &kp PG_UP           &kp MINUS                                    &kp PLUS    &kp HOME             &kp UP               &kp PG_UP          &trans               &trans
&trans          &kp LBRC          &kp LEFT         &kp DOWN          &kp RIGHT           &kp UNDER                                    &kp EQUAL   &kp LEFT             &kp DOWN             &kp RIGHT          &kp RBRC             &trans
&trans          &kp LBKT          &kp END          &trans            &kp PG_DN           &trans            &kp LPAR   &kp RPAR        &trans      &kp END              &trans               &kp PG_DN          &kp RBKT             &trans
&trans          &trans            &trans           &trans            &kp LS(LG(LBKT))    &kp LS(LG(RBKT))  &to 3      &trans          &trans                                                                   &trans               &trans
>; }; // sym
/********************************************************************************/
/* QWERTY */
/********************************************************************************/
qwerty { bindings = <
&trans          &trans            &trans           &trans            &trans              &trans                                       &trans      &trans               &trans               &trans             &trans               &trans
&trans          &kp Q             &kp W            &kp E             &kp T               &kp Y                                        &kp U       &kp I                &kp O                &kp P              &kp RBKT             &trans
&trans          &kp A             &kp S            &kp D             &kp F               &kp G                                        &kp H       &kp J                &kp K                &kp L              &kp SEMI             &trans
&trans          &kp Z             &kp X            &kp C             &kp V               &kp B             &trans     &trans          &kp K       &kp M                &kp COMMA            &kp DOT            &kp FSLH             &trans
&trans          &trans            &trans           &trans            &trans              &trans            &to 4      &trans          &trans                                                                   &trans               &trans
>; }; // qwerty
/********************************************************************************/
/* MOUSE */
/********************************************************************************/
mouse { bindings = <
&trans          &trans            &trans           &trans            &trans              &trans                                       &trans      &trans               &trans               &trans             &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans                                       &trans      &trans               &mkp MB4             &trans             &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans                                       &trans      &mkp MB1             &mo 4                &mkp MB2           &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans            &trans     &trans          &trans      &trans               &mkp MB3             &trans             &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans            &to 0      &trans          &trans                                                                   &trans               &trans
>; }; // mouse
/********************************************************************************/
/* SNIPE */
/********************************************************************************/
snipe { bindings = <
&bt BT_CLR      &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2      &bt BT_SEL 3        &bt BT_SEL 4                                 &trans      &trans               &trans               &trans             &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans                                       &trans      &trans               &mkp MB4             &trans             &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans                                       &trans      &mkp MB1             &mo 4                &mkp MB2           &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans            &trans     &trans          &trans      &trans               &mkp MB3             &trans             &trans               &trans
&trans          &trans            &trans           &trans            &trans              &trans            &to 0      &trans          &trans                                                                   &trans               &trans
>; }; // snipe
  };
};
