#define COLEMAK 0
#define NUM     1
#define SYM     2
#define MOUSE   3
#define SNIPE   4

#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define U_MOUSE_MOVE_MAX 1400                     /* <--- New max speed setting (default: 600) */

#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT

#define MOVE_UP MOVE_VERT(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_VERT(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_HOR(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_HOR(U_MOUSE_MOVE_MAX)

&mmv {
    time-to-max-speed-ms = <400>;             /* <--- How long time until max speed is reached (default: 500) */
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

/ {
    behaviors {
        bhm: balanced_homerow_mods {
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            quick-tap-ms = <0>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
        };

        bspc_del: backspace_delete {
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-mod-morph";
            keep-mods = <(MOD_RSFT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        gresc: grave_escape {
            bindings = <&kp ESC>, <&kp GRAVE>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-mod-morph";
            mods = <(MOD_LGUI|MOD_RGUI)>;
        };

        gr_tilde_q: grave_tilde_q {
            bindings = <&bhm LC(LALT) GRAVE>, <&kp Q>, <&kp TILDE>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "GRAVE_TILDE_Q";
            tapping-term-ms = <200>;
        };

        hm: homerow_mods {
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";
            quick-tap-ms = <0>;
            tapping-term-ms = <150>;
        };

        lt1_g_minus: lt1_g_minus{
            bindings = <&lt 1 G>, <&kp MINUS>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "lt1_g_minus";
            tapping-term-ms = <200>;
        };

        lt2_d_under: lt2_d_under{
            bindings = <&lt 2 D>, <&kp UNDER>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "lt2_d_under";
            tapping-term-ms = <200>;
        };

        lt3_b_lpar: lt3_b_lpar{
            bindings = <&lt 3 B>, <&kp LBRC>, <&kp LBKT>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "lt3_b_lpar";
            tapping-term-ms = <200>;
        };

        lt1_j_plus: lt1_j_plus{
            bindings = <&lt 1 J>, <&kp PLUS>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "lt1_j_plus";
            tapping-term-ms = <200>;
        };

        lt2_h_equal: lt2_h_equal{
            bindings = <&lt 2 H>, <&kp EQUAL>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "lt2_h_equal";
            tapping-term-ms = <200>;
        };

        lt3_k_rpar: lt3_k_rpar {
            bindings = <&lt 3 K>, <&kp RBRC>, <&kp RBKT>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "lt3_k_rpar";
            tapping-term-ms = <200>;
        };

        bslh_pipe: bslh_pipe {
            bindings = <&kp BSLH>, <&kp PIPE>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "bslh_pipe";
            tapping-term-ms = <200>;
        };

        sqt_dqt: sqt_dqt {
            bindings = <&kp SQT>, <&kp DOT>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "quote_dquote";
            tapping-term-ms = <200>;
        };

        semi_col: semi_col {
            bindings = <&bhm RC(RALT) SEMI>, <&kp COLON>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "semi_col";
            tapping-term-ms = <200>;
        };

        fslh_qn: fslh_qn {
            bindings = <&bhm RS(RCTRL) FSLH>, <&kp QMARK>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "fslh_qn";
            tapping-term-ms = <200>;
        };

        dot_gt: dot_gt {
            bindings = <&bhm RS(RALT) DOT>, <&kp GT>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "dot_gt";
            tapping-term-ms = <200>;
        };

        comma_lt: comma_lt {
            bindings = <&bhm RS(RGUI) COMMA>, <&kp LT>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "comma_lt";
            tapping-term-ms = <200>;
        };

        left_bkt: left_bracket {
            bindings = <&bhm LS(LC(LA(LGUI))) LBKT>, <&kp LBRC>, <&kp LPAR>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_BKT";
            tapping-term-ms = <200>;
        };

        right_bkt: right_bracket {
            bindings = <&bhm RS(RC(RA(RGUI))) RBKT>, <&kp RBRC>, <&kp RPAR>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_BKT";
            tapping-term-ms = <200>;
        };

        left_shift: left_shift {
            bindings = <&bhm LSHFT LPAR>, <&caps_word>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "LEFT_SHIFT";
            tapping-term-ms = <200>;
        };

        right_shift: right_shift {
            bindings = <&bhm RSHFT RPAR>, <&caps_word>;
            #binding-cells = <0>;
            compatible = "zmk,behavior-tap-dance";
            label = "RIGHT_SHIFT";
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        right-reset {
            bindings = <&bootloader>;
            key-positions = <59 60>;
        };

        left-reset {
            bindings = <&bootloader>;
            key-positions = <50 51>;
        };

        tb-snipe6 {
            bindings = <&mo 3>;
            key-positions = <43 44>;
        };

        cmd-z {
            bindings = <&kp LG(Z)>;
            key-positions = <37 38>;
        };

        cmd-x {
            bindings = <&kp LG(X)>;
            key-positions = <38 39>;
        };

        cmd-c {
            bindings = <&kp LG(C)>;
            key-positions = <39 40>;
        };

        cmd-v {
            bindings = <&kp LG(V)>;
            key-positions = <40 41>;
        };

        cmd-w {
            bindings = <&kp LG(W)>;
            key-positions = <14 15>;
        };

        cmd-t {
            bindings = <&kp LG(T)>;
            key-positions = <28 29>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        colemak {
            label = "COLEMAK";
            bindings = <
&gresc          &kp N1            &kp N2           &kp N3           &kp N4               &kp N5                                            &kp N6               &kp N7               &kp N8               &kp N9             &kp N0               &kp MINUS
&kp TAB         &bhm LC(LALT) Q   &bhm LC(LGUI) W  &bhm LA(LGUI) F  &bhm LC(LA(LGUI)) P  &lt 1 G                                           &lt 1 J              &bhm RC(RA(RGUI)) L  &bhm RA(RGUI) U      &bhm RC(RGUI) Y    &bhm RC(RALT) SEMI   &kp BACKSLASH
&bspc_del       &bhm LCTRL A      &bhm LALT R      &bhm LGUI S      &bhm LSHIFT T        &lt 2 D                                           &lt 2 H              &bhm RSHIFT N        &bhm RGUI E          &bhm RALT I        &bhm RCTRL O         &kp SQT
&left_shift     &bhm LS(LCTRL) Z  &bhm LS(LALT) X  &bhm LS(LGUI) C  &bhm LS(LC(LALT)) V  &lt 3 B           &left_bkt     &right_bkt        &bhm RS(RC(RALT)) K  &bhm RS(RC(RALT)) M  &bhm RS(RGUI) COMMA  &bhm RS(RALT) DOT  &bhm RS(RCTRL) FSLH  &right_shift
&lt 1 C_VOL_DN  &lt 2 C_VOL_UP    &kp LEFT         &kp RIGHT        &kp SPACE            &bhm LSHFT ENTER  &sl 1         &bhm RSHFT ENTER  &kp SPACE                                                                         &lt 2 UP             &lt 1 DOWN
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp GRAVE  &kp F1  &kp F2            &kp F3            &kp F4      &kp F5                            &kp F6        &kp F7     &kp F8     &kp F9     &kp F10          &kp F11
&trans     &trans  &kp LS(N7)        &kp LS(N8)        &kp LS(N9)  &kp KP_MINUS                      &kp KP_PLUS   &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_SLASH     &kp F12
&trans     &trans  &kp LS(N4)        &kp LS(N5)        &kp LS(N6)  &kp UNDER                         &kp KP_EQUAL  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_ASTERISK  &kp F13
&trans     &trans  &kp LS(N1)        &kp LS(N2)        &kp LS(N3)  &kp LS(N0)    &kp LBRC  &kp RBRC  &kp KP_N0     &kp KP_N1  &kp KP_N2  &kp KP_N3  &trans           &trans
&trans     &trans  &kp LS(LG(LBKT))  &kp LS(LG(RBKT))  &kp LEFT    &kp RIGHT     &sl 2     &kp UP    &kp DOWN                                       &trans           &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&trans  &trans  &trans    &trans    &trans            &kp LG(F6)                            &kp RS(F6)  &kp RA(F7)  &kp RG(F7)  &trans       &trans  &trans
&trans  &trans  &kp HOME  &kp UP    &kp PG_UP         &kp MINUS                             &kp PLUS    &kp HOME    &kp UP      &kp PAGE_UP  &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT         &kp UNDER                             &kp EQUAL   &kp LEFT    &kp DOWN    &kp RIGHT    &trans  &trans
&trans  &trans  &kp END   &trans    &kp PG_DN         &trans            &kp LPAR  &kp RPAR  &trans      &kp END     &trans      &kp PG_DN    &trans  &trans
&trans  &trans  &trans    &trans    &kp LS(LG(LBKT))  &kp LS(LG(RBKT))  &sl 3     &trans    &trans                                           &trans  &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans    &mkp MB4  &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &mkp MB1  &mo 4     &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &mkp MB3  &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &sl 0   &trans  &trans                                &trans  &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &trans  &trans    &trans    &trans    &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                        &trans  &trans    &mkp MB4  &trans    &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                        &trans  &mkp MB1  &mo 3     &mkp MB2  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans    &mkp MB3  &trans    &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans        &sl 0   &trans  &trans                                &trans  &trans
            >;
        };
    };
};
